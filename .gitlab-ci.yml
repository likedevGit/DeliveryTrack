# Pipeline GitLab CI/CD pour DeliveryTrack
stages:
  - validate
  - test
  - build
  - deploy

# Variables globales
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  NODE_VERSION: "18"

# Cache pour optimiser les builds
cache:
  paths:
    - node_modules/
    - .npm/

# Validation du code
validate:
  stage: validate
  image: node:18-alpine
  before_script:
    - npm ci
  script:
    - echo "🔍 Validation du code..."
    - npm run lint
    - npm run type-check
    - echo "✅ Validation terminée"
  only:
    - merge_requests
    - main
    - develop

# Tests unitaires
test:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci
  script:
    - echo "🧪 Exécution des tests..."
    - npm test
    - echo "✅ Tests terminés"
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build de l'application
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🏗️ Construction de l'image Docker..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - echo "📦 Push des images..."
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "✅ Build terminé"
  only:
    - main
    - develop

# Déploiement en staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
  script:
    - echo "🚀 Déploiement en staging..."
    - |
      ssh $STAGING_USER@$STAGING_HOST << 'EOF'
        cd /opt/deliverytrack
        docker pull $CI_REGISTRY_IMAGE:latest
        docker-compose -f docker-compose.staging.yml down
        docker-compose -f docker-compose.staging.yml up -d
        docker system prune -f
      EOF
    - echo "✅ Déploiement staging terminé"
  environment:
    name: staging
    url: https://staging.deliverytrack.com
  only:
    - develop

# Déploiement en production
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    - echo "🚀 Déploiement en production..."
    - |
      ssh $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
        cd /opt/deliverytrack
        docker pull $CI_REGISTRY_IMAGE:latest
        docker stack deploy -c docker-compose.production.yml deliverytrack
        docker system prune -f
      EOF
    - echo "✅ Déploiement production terminé"
  environment:
    name: production
    url: https://deliverytrack.com
  when: manual
  only:
    - main

# Tests de sécurité
security:scan:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci
  script:
    - echo "🔒 Scan de sécurité..."
    - npm audit --audit-level moderate
    - echo "✅ Scan de sécurité terminé"
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Tests de performance
performance:test:
  stage: test
  image: node:18-alpine
  before_script:
    - npm ci
  script:
    - echo "⚡ Tests de performance..."
    - npm run build
    - echo "✅ Tests de performance terminés"
  artifacts:
    paths:
      - .next/
    expire_in: 1 week
  allow_failure: true
  only:
    - main
